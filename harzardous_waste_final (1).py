# -*- coding: utf-8 -*-
"""HARZARDOUS WASTE FINAL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vd_5AfYRQF6AJmSSKw7EjQP7OFMYLGrw
"""

from google.colab import files
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import statistics
from sklearn.preprocessing import StandardScaler

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("Hazardous waste per capita-Global Analysis.csv")
df

df.drop(df.columns[[1]], axis=1, inplace =True)
df

df.rename(columns={'Entity':'Countries','12.4.2 - Hazardous waste generated, per capita (Kg) - EN_HAZ_PCAP':'Waste per capita'}, inplace=True)
df.info()

duplicates = df[df.duplicated()]
print("Duplicate data:")
print(duplicates)

missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

# Calculate global average waste per capita
global_average = df['Waste per capita'].mean()

# Calculate standard error of the mean
standard_error = df['Waste per capita'].sem()

# Calculate degrees of freedom
degrees_of_freedom = len(df) - 1

# Calculate t-score for 95% confidence interval
t_score = stats.t.ppf(0.975, df=degrees_of_freedom)

# Calculate margin of error
margin_of_error = t_score * standard_error

# Calculate confidence interval
confidence_interval = (global_average - margin_of_error, global_average + margin_of_error)

# Calculate confidence level
confidence_level = 0.95

# Output results
print("Global Average Waste per capita:", global_average)
print("Standard Error of the Mean:", standard_error)
print("Degrees of Freedom:", degrees_of_freedom)
print("t-score for 95% Confidence Interval:", t_score)
print("Margin of Error:", margin_of_error)
print("95% Confidence Interval:", confidence_interval)
print("Confidence Level:", confidence_level)

from sklearn.preprocessing import StandardScaler

column_to_standardize = df[['Waste per capita']]

# Initialize StandardScaler
scaler = StandardScaler()

# Fit and transform the data
column_standardized = scaler.fit_transform(column_to_standardize)

# Replace the original column with the standardized values
df['Waste per capita'] = column_standardized

# Print the DataFrame with the standardized values
print(df)

"""# New Cleaned Data"""

df.to_csv('Cleaned-hazardous-waste-per-capita.csv', index=False)
files.download('Cleaned-hazardous-waste-per-capita.csv')

# Filter DataFrame for European countries
european_countries = ['Germany', 'France', 'Italy', 'Spain', 'United Kingdom', 'Netherlands', 'Belgium', 'Switzerland', 'Sweden', 'Austria', 'Norway', 'Denmark', 'Finland', 'Greece', 'Portugal', 'Ireland', 'Poland', 'Romania', 'Czech Republic', 'Hungary', 'Slovakia', 'Croatia', 'Slovenia', 'Lithuania', 'Latvia', 'Cyprus', 'Luxembourg', 'Malta'] # Removed Estonia
df_europe = df[df['Countries'].isin(european_countries)]

# Calculate average waste generated per capita across all European countries
average_waste_per_capita = df_europe['Waste per capita'].mean()

# Plot clustered bar chart
plt.figure(figsize=(12, 8))
plt.barh(df_europe['Countries'], df_europe['Waste per capita'], label='Waste per capita')
plt.axvline(x=average_waste_per_capita, color='r', linestyle='--', label='European Average')
plt.title('Harzadous Waste per Capita for European Countries (Excluding Estonia)')
plt.xlabel('Waste per Capita')
plt.ylabel('Countries')
plt.legend()
plt.show()

# Calculate global average waste per capita
global_average = df['Waste per capita'].mean()

# Calculate standard error of the mean
standard_error = df['Waste per capita'].sem()

# Calculate degrees of freedom
degrees_of_freedom = len(df) - 1

# Calculate t-score for 95% confidence interval
t_score = stats.t.ppf(0.975, df=degrees_of_freedom)

# Calculate margin of error
margin_of_error = t_score * standard_error

# Calculate confidence interval
confidence_interval = (global_average - margin_of_error, global_average + margin_of_error)

# Calculate confidence level
confidence_level = 0.95

# Printing the Output results
print("Global Average Waste per capita:", global_average)
print("Standard Error of the Mean:", standard_error)
print("Degrees of Freedom:", degrees_of_freedom)
print("t-score for 95% Confidence Interval:", t_score)
print("Margin of Error:", margin_of_error)
print("95% Confidence Interval:", confidence_interval)
print("Confidence Level:", confidence_level)

